dado2 <- sample(1:6, n, replace = TRUE)
# Crear un array de la suma de los dados
data10.dados <- data.frame(dado1 = dado1, dado2 = dado2)
data10.dados$dados <- data10.dados$dado1 + data10.dados$dado2
ggplot(data = data10.dados, aes(x = dados)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(x = "Valores de los dados", y = "Frecuencia",
title = paste("Histograma de los valores de los dados",nrow(data10.dados))) +
theme_bw()
# PRUEBA DE PROBABILIDAD PARA 2000 LANZADAS DE 2 DADOS---------------------
# Numero de datos
n <- 2000
# Generar el array con números aleatorios del 1 al 6
dado1 <- sample(1:6, n, replace = TRUE)
dado2 <- sample(1:6, n, replace = TRUE)
# Crear un array de la suma de los dados
data10.dados <- data.frame(dado1 = dado1, dado2 = dado2)
data10.dados$dados <- data10.dados$dado1 + data10.dados$dado2
ggplot(data = data10.dados, aes(x = dados)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(x = "Valores de los dados", y = "Frecuencia",
title = paste("Histograma de los valores de los dados",nrow(data10.dados))) +
theme_bw()
# PRUEBA DE PROBABILIDAD PARA 10 LANZADAS DE 2 DADOS --------------------
# Numero de datos
n <- 10
# Generar el array con números aleatorios del 1 al 6
dado1 <- sample(1:6, n, replace = TRUE)
dado2 <- sample(1:6, n, replace = TRUE)
# Crear un array de la suma de los dados
data10.dados <- data.frame(dado1 = dado1, dado2 = dado2)
data10.dados$dados <- data10.dados$dado1 + data10.dados$dado2
ggplot(data = data10.dados, aes(x = dados)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(x = "Valores de los dados", y = "Frecuencia",
title = paste("Histograma de los valores de los dados",nrow(data10.dados))) +
theme_classic()
ggplot(data = data10.dados, aes(x = dados)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(x = "Valores de los dados", y = "Frecuencia",
title = paste("Histograma de los valores de los dados",nrow(data10.dados))) +
theme_dark()
ggplot(data = data10.dados, aes(x = dados)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(x = "Valores de los dados", y = "Frecuencia",
title = paste("Histograma de los valores de los dados",nrow(data10.dados))) +
theme_bw()
ggplot(data = data10.dados, aes(x = dados)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(x = "Valores de los dados", y = "Frecuencia",
title = paste("Histograma para",nrow(data10.dados),"Lanzadas de 2 dados")) +
theme_bw()
# PRUEBA DE PROBABILIDAD PARA 10 LANZADAS DE 2 DADOS --------------------
# Numero de datos
n <- 2000
# Generar el array con números aleatorios del 1 al 6
dado1 <- sample(1:6, n, replace = TRUE)
dado2 <- sample(1:6, n, replace = TRUE)
# Crear un array de la suma de los dados
data10.dados <- data.frame(dado1 = dado1, dado2 = dado2)
data10.dados$dados <- data10.dados$dado1 + data10.dados$dado2
ggplot(data = data10.dados, aes(x = dados)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(x = "Valores de los dados", y = "Frecuencia",
title = paste("Histograma para",nrow(data10.dados),"Lanzadas de 2 dados")) +
theme_bw()
# PRUEBA DE PROBABILIDAD PARA 10 LANZADAS DE 2 DADOS --------------------
# Numero de datos
n <- 10000
# Generar el array con números aleatorios del 1 al 6
dado1 <- sample(1:6, n, replace = TRUE)
dado2 <- sample(1:6, n, replace = TRUE)
# Crear un array de la suma de los dados
data10.dados <- data.frame(dado1 = dado1, dado2 = dado2)
data10.dados$dados <- data10.dados$dado1 + data10.dados$dado2
ggplot(data = data10.dados, aes(x = dados)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(x = "Valores de los dados", y = "Frecuencia",
title = paste("Histograma para",nrow(data10.dados),"Lanzadas de 2 dados")) +
theme_bw()
# PRUEBA DE PROBABILIDAD PARA 10 LANZADAS DE 2 DADOS --------------------
# Numero de datos
n <- 50000
# Generar el array con números aleatorios del 1 al 6
dado1 <- sample(1:6, n, replace = TRUE)
dado2 <- sample(1:6, n, replace = TRUE)
# Crear un array de la suma de los dados
data10.dados <- data.frame(dado1 = dado1, dado2 = dado2)
data10.dados$dados <- data10.dados$dado1 + data10.dados$dado2
ggplot(data = data10.dados, aes(x = dados)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(x = "Valores de los dados", y = "Frecuencia",
title = paste("Histograma para",nrow(data10.dados),"Lanzadas de 2 dados")) +
theme_bw()
ggplot(data = data10.dados, aes(x = dados)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(x = "Valores de los dados", y = "Frecuencia",
title = paste("Histograma para",nrow(data10.dados),"Lanzadas de 2 dados")) +
scale_x_continuous(breaks = seq(min(dados), max(dados), by = 1))
ggplot(data = data10.dados, aes(x = dados)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(x = "Valores de los dados", y = "Frecuencia",
title = paste("Histograma para",nrow(data10.dados),"Lanzadas de 2 dados")) +
scale_x_continuous(breaks = seq(min(data10.dados$dados), max(data10.dados$dados), by = 1))
ggplot(data = data10.dados, aes(x = dados)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(x = "Valores de los dados", y = "Frecuencia",
title = paste("Histograma para",nrow(data10.dados),"Lanzadas de 2 dados")) +
scale_x_continuous(breaks = seq(min(data10.dados$dados), max(data10.dados$dados), by = 1)) +
theme_bw()
# PRUEBA DE PROBABILIDAD PARA 10 LANZADAS DE 2 DADOS --------------------
# Numero de datos
n <- 100
# Generar el array con números aleatorios del 1 al 6
dado1 <- sample(1:6, n, replace = TRUE)
dado2 <- sample(1:6, n, replace = TRUE)
# Crear un array de la suma de los dados
data10.dados <- data.frame(dado1 = dado1, dado2 = dado2)
data10.dados$dados <- data10.dados$dado1 + data10.dados$dado2
# Histograma para 10 lanzadas de 2 dados
library(ggplot2)
ggplot(data = data10.dados, aes(x = dados)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(x = "Valores de los dados", y = "Frecuencia",
title = paste("Histograma para",nrow(data10.dados),"Lanzadas de 2 dados")) +
scale_x_continuous(breaks = seq(min(data10.dados$dados), max(data10.dados$dados), by = 1)) +
theme_bw()
# PRUEBA DE PROBABILIDAD PARA 10 LANZADAS DE 2 DADOS --------------------
# Numero de datos
n <- 100
# Generar el array con números aleatorios del 1 al 6
dado1 <- sample(1:6, n, replace = TRUE)
dado2 <- sample(1:6, n, replace = TRUE)
# Crear un array de la suma de los dados
dados <- data.frame(dado1 = dado1, dado2 = dado2)
dados$dados <- data10.dados$dado1 + data10.dados$dado2
ggplot(data = data10.dados, aes(x = dados)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(x = "Valores de los dados", y = "Frecuencia",
title = paste("Histograma para",nrow(dados),"Lanzadas de 2 dados")) +
scale_x_continuous(breaks = seq(min(dados$dados), max(dados$dados), by = 1)) +
theme_bw()
# PRUEBA DE PROBABILIDAD PARA 10 LANZADAS DE 2 DADOS --------------------
# Numero de datos
n <- 100
# Generar el array con números aleatorios del 1 al 6
dado1 <- sample(1:6, n, replace = TRUE)
dado2 <- sample(1:6, n, replace = TRUE)
# Crear un array de la suma de los dados
dados <- data.frame(dado1 = dado1, dado2 = dado2)
dados$dados <- dados$dado1 + dados$dado2
ggplot(data = data10.dados, aes(x = dados)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(x = "Valores de los dados", y = "Frecuencia",
title = paste("Histograma para",nrow(dados),"Lanzadas de 2 dados")) +
scale_x_continuous(breaks = seq(min(dados$dados), max(dados$dados), by = 1)) +
theme_bw()
# Generar datos de tiempo de estudio (simulación)
set.seed(123)  # Establecer semilla para reproducibilidad
tiempo_estudio <- rnorm(50, mean = 3, sd = 1)  # Muestra de 50 estudiantes
# Calcular el intervalo de confianza para la media
intervalo_confianza <- t.test(tiempo_estudio)$conf.int
# Mostrar el resultado del intervalo de confianza
print(intervalo_confianza)
# Generar datos de tiempo de estudio (simulación)
set.seed(123)  # Establecer semilla para reproducibilidad
tiempo_estudio <- rnorm(50, mean = 3, sd = 1)  # Muestra de 50 estudiantes
# Calcular el intervalo de confianza para la media
intervalo_confianza <- t.test(tiempo_estudio)$conf.int
# Mostrar el resultado del intervalo de confianza
print(intervalo_confianza)
# Cargar la librería ggplot2
library(ggplot2)
# Generar datos de tiempo de estudio (simulación)
set.seed(123)
tiempo_estudio <- rnorm(50, mean = 3, sd = 1)
# Calcular el intervalo de confianza para la media
resultado_test <- t.test(tiempo_estudio)
intervalo_confianza <- resultado_test$conf.int
media_estimada <- resultado_test$estimate
# Crear un dataframe con los datos
df <- data.frame(tiempo_estudio = tiempo_estudio)
# Crear el gráfico con ggplot2
ggplot(df, aes(x = tiempo_estudio)) +
geom_density(fill = "skyblue", alpha = 0.7) +  # Distribución de densidad
geom_vline(aes(xintercept = media_estimada), color = "red", linetype = "dashed", size = 1) +  # Línea vertical en la media
geom_segment(aes(x = intervalo_confianza[1], xend = intervalo_confianza[2], y = 0.2, yend = 0.2), color = "blue", size = 1.5) +  # Segmento del intervalo de confianza
geom_point(aes(x = intervalo_confianza[1], y = 0.2), color = "blue", size = 3) +  # Puntos del intervalo de confianza
geom_point(aes(x = intervalo_confianza[2], y = 0.2), color = "blue", size = 3) +  # Puntos del intervalo de confianza
labs(x = "Tiempo de estudio", y = "Densidad", title = "Distribución de tiempos de estudio con Intervalo de Confianza") +
theme_minimal()
# Crear el gráfico con ggplot2
ggplot(df, aes(x = tiempo_estudio)) +
geom_density(fill = "skyblue", alpha = 0.7) +  # Distribución de densidad
geom_vline(aes(xintercept = media_estimada), color = "red", linetype = "dashed", linewidth = 1) +  # Línea vertical en la media
geom_segment(aes(x = intervalo_confianza[1], xend = intervalo_confianza[2], y = 0.2, yend = 0.2), color = "blue", size = 1.5) +  # Segmento del intervalo de confianza
geom_point(aes(x = intervalo_confianza[1], y = 0.2), color = "blue", size = 3) +  # Puntos del intervalo de confianza
geom_point(aes(x = intervalo_confianza[2], y = 0.2), color = "blue", size = 3) +  # Puntos del intervalo de confianza
labs(x = "Tiempo de estudio", y = "Densidad", title = "Distribución de tiempos de estudio con Intervalo de Confianza") +
theme_minimal()
# Ejemplo usando la prueba de Shapiro-Wilk
set.seed(123)
datos <- rnorm(100)  # Datos generados aleatoriamente
resultado_shapiro <- shapiro.test(datos)
print(resultado_shapiro)
resultado_shapiro <- shapiro.test(datos)
print(resultado_shapiro)
resultado_ks <- ks.test(datos)
# Prueba de normalidad de Kolmogorov-Smirnov:
resultado_ks <- ks.test(datos, "pnorm", mean = mean(datos), sd = sd(datos))
print(resultado_ks)
# Prueba de Anderson-Darling
library(nortest)  # Cargando el paquete nortest
install.packages(nortest)
install.packages(nortest)
resultado_ad <- ad.test(datos)
install.packages(nortest)
install.packages(nortest)
install.packages(nortest)
# Crear el gráfico con ggplot2
ggplot(df, aes(x = tiempo_estudio)) +
geom_density(fill = "skyblue", alpha = 0.7) +  # Distribución de densidad
geom_vline(aes(xintercept = media_estimada), color = "red", linetype = "dashed", linewidth = 1) +  # Línea vertical en la media
geom_segment(aes(x = intervalo_confianza[1], xend = intervalo_confianza[2], y = 0.2, yend = 0.2), color = "blue", size = 1.5) +  # Segmento del intervalo de confianza
geom_point(aes(x = intervalo_confianza[1], y = 0.2), color = "blue", size = 3) +  # Puntos del intervalo de confianza
geom_point(aes(x = intervalo_confianza[2], y = 0.2), color = "blue", size = 3) +  # Puntos del intervalo de confianza
labs(x = "Tiempo de estudio", y = "Densidad", title = "Distribución de tiempos de estudio con Intervalo de Confianza") +
theme_minimal()
library(ggplot2)
# Crear el gráfico con ggplot2
ggplot(df, aes(x = tiempo_estudio)) +
geom_density(fill = "skyblue", alpha = 0.7) +  # Distribución de densidad
geom_vline(aes(xintercept = media_estimada), color = "red", linetype = "dashed", linewidth = 1) +  # Línea vertical en la media
geom_segment(aes(x = intervalo_confianza[1], xend = intervalo_confianza[2], y = 0.2, yend = 0.2), color = "blue", size = 1.5) +  # Segmento del intervalo de confianza
geom_point(aes(x = intervalo_confianza[1], y = 0.2), color = "blue", size = 3) +  # Puntos del intervalo de confianza
geom_point(aes(x = intervalo_confianza[2], y = 0.2), color = "blue", size = 3) +  # Puntos del intervalo de confianza
labs(x = "Tiempo de estudio", y = "Densidad", title = "Distribución de tiempos de estudio con Intervalo de Confianza") +
theme_minimal()
install.packages("devtools")
devtools::install_github("tylermorganwall/rayshader")
devtools::install_github("tylermorganwall/rayshader")
devtools::install_github("tylermorganwall/rayshader")
devtools::install_github("tylermorganwall/rayshader")
devtools::install_github("tylermorganwall/rayshader")
install.packages(c("data.table", "digest", "flextable", "gdtools", "Hmisc", "multcompView", "qs", "RcppEigen", "rgl", "rmarkdown", "systemfonts", "tidyselect"))
# Carga las librerías necesarias
library(Kendall)
library(MASS)
library(trend)
# Instala los paquetes necesarios si no los tienes instalados
install.packages(c("Kendall", "MASS", "trend"))
install.packages(c("Kendall", "MASS", "trend"))
# Carga las librerías necesarias
library(Kendall)
library(MASS)
library(trend)
# Define la data
data <- c(1086, 1133, 1144, 1179, 1137, 1223, 1206, 1201, 1209, 1214, 1222, 1210, 1245, 1222, 1256)
# Calcula las pruebas estadísticas
results <- data.frame(
Prueba_Estadistica = c("Mann-Kendall", "Spearman's Rho", "Linear regression",
"Cusum", "Cumulative deviation", "Worsley likelihood",
"Rank Sum", "Student's t", "Median Crossing", "Turning Point",
"Rank Diffrence", "Auto Correlation"),
value = c(
# Mann-Kendall test
ifelse(kendall.test(data)$p.value < 0.05, paste("Significativo (", kendall.test(data)$p.value, ")", sep = ""), "No significativo"),
# Spearman's Rho
cor.test(data, method = "spearman")$estimate,
# Linear regression
ifelse(summary(lm(data ~ seq_along(data)))$coefficients[2,4] < 0.05, paste("Significativo (", summary(lm(data ~ seq_along(data)))$coefficients[2,4], ")", sep = ""), "No significativo"),
# Cusum test
ifelse(cusum.test(data)$p.value < 0.05, paste("Significativo (", cusum.test(data)$p.value, ")", sep = ""), "No significativo"),
# Cumulative deviation test
ifelse(cumdev.test(data)$p.value < 0.05, paste("Significativo (", cumdev.test(data)$p.value, ")", sep = ""), "No significativo"),
# Worsley likelihood test
ifelse(worsley.test(data)$p.value < 0.05, paste("Significativo (", worsley.test(data)$p.value, ")", sep = ""), "No significativo"),
# Rank Sum test
ifelse(wilcox.test(data)$p.value < 0.05, paste("Significativo (", wilcox.test(data)$p.value, ")", sep = ""), "No significativo"),
# Student's t test
ifelse(t.test(data)$p.value < 0.05, paste("Significativo (", t.test(data)$p.value, ")", sep = ""), "No significativo"),
# Median Crossing test
ifelse(medianCrossing.test(data)$p.value < 0.05, paste("Significativo (", medianCrossing.test(data)$p.value, ")", sep = ""), "No significativo"),
# Turning Point test
ifelse(turningPoint.test(data)$p.value < 0.05, paste("Significativo (", turningPoint.test(data)$p.value, ")", sep = ""), "No significativo"),
# Rank Diffrence test
ifelse(rankDifference.test(data)$p.value < 0.05, paste("Significativo (", rankDifference.test(data)$p.value, ")", sep = ""), "No significativo"),
# Auto Correlation test
ifelse(acf(data, plot = FALSE)$acf[2] < 0.05, paste("Significativo (", acf(data, plot = FALSE)$acf[2], ")", sep = ""), "No significativo")
)
)
?Kendall
# Calcula las pruebas estadísticas
results <- data.frame(
Prueba_Estadistica = c("Mann-Kendall", "Spearman's Rho", "Linear regression",
"Cusum", "Cumulative deviation", "Worsley likelihood",
"Rank Sum", "Student's t", "Median Crossing", "Turning Point",
"Rank Diffrence", "Auto Correlation"),
value = c(
# Mann-Kendall test
#ifelse(kendall.test(data)$p.value < 0.05, paste("Significativo (", kendall.test(data)$p.value, ")", sep = ""), "No significativo"),
# Spearman's Rho
cor.test(data, method = "spearman")$estimate,
# Linear regression
ifelse(summary(lm(data ~ seq_along(data)))$coefficients[2,4] < 0.05, paste("Significativo (", summary(lm(data ~ seq_along(data)))$coefficients[2,4], ")", sep = ""), "No significativo"),
# Cusum test
ifelse(cusum.test(data)$p.value < 0.05, paste("Significativo (", cusum.test(data)$p.value, ")", sep = ""), "No significativo"),
# Cumulative deviation test
ifelse(cumdev.test(data)$p.value < 0.05, paste("Significativo (", cumdev.test(data)$p.value, ")", sep = ""), "No significativo"),
# Worsley likelihood test
ifelse(worsley.test(data)$p.value < 0.05, paste("Significativo (", worsley.test(data)$p.value, ")", sep = ""), "No significativo"),
# Rank Sum test
ifelse(wilcox.test(data)$p.value < 0.05, paste("Significativo (", wilcox.test(data)$p.value, ")", sep = ""), "No significativo"),
# Student's t test
ifelse(t.test(data)$p.value < 0.05, paste("Significativo (", t.test(data)$p.value, ")", sep = ""), "No significativo"),
# Median Crossing test
ifelse(medianCrossing.test(data)$p.value < 0.05, paste("Significativo (", medianCrossing.test(data)$p.value, ")", sep = ""), "No significativo"),
# Turning Point test
ifelse(turningPoint.test(data)$p.value < 0.05, paste("Significativo (", turningPoint.test(data)$p.value, ")", sep = ""), "No significativo"),
# Rank Diffrence test
ifelse(rankDifference.test(data)$p.value < 0.05, paste("Significativo (", rankDifference.test(data)$p.value, ")", sep = ""), "No significativo"),
# Auto Correlation test
ifelse(acf(data, plot = FALSE)$acf[2] < 0.05, paste("Significativo (", acf(data, plot = FALSE)$acf[2], ")", sep = ""), "No significativo")
)
)
# Calcula las pruebas estadísticas
results <- data.frame(
Prueba_Estadistica = c("Mann-Kendall", "Spearman's Rho", "Linear regression",
"Cusum", "Cumulative deviation", "Worsley likelihood",
"Rank Sum", "Student's t", "Median Crossing", "Turning Point",
"Rank Diffrence", "Auto Correlation"),
value = c(
# Mann-Kendall test
#ifelse(kendall.test(data)$p.value < 0.05, paste("Significativo (", kendall.test(data)$p.value, ")", sep = ""), "No significativo"),
# Spearman's Rho
#cor.test(data, method = "spearman")$estimate,
# Linear regression
ifelse(summary(lm(data ~ seq_along(data)))$coefficients[2,4] < 0.05, paste("Significativo (", summary(lm(data ~ seq_along(data)))$coefficients[2,4], ")", sep = ""), "No significativo"),
# Cusum test
ifelse(cusum.test(data)$p.value < 0.05, paste("Significativo (", cusum.test(data)$p.value, ")", sep = ""), "No significativo"),
# Cumulative deviation test
ifelse(cumdev.test(data)$p.value < 0.05, paste("Significativo (", cumdev.test(data)$p.value, ")", sep = ""), "No significativo"),
# Worsley likelihood test
ifelse(worsley.test(data)$p.value < 0.05, paste("Significativo (", worsley.test(data)$p.value, ")", sep = ""), "No significativo"),
# Rank Sum test
ifelse(wilcox.test(data)$p.value < 0.05, paste("Significativo (", wilcox.test(data)$p.value, ")", sep = ""), "No significativo"),
# Student's t test
ifelse(t.test(data)$p.value < 0.05, paste("Significativo (", t.test(data)$p.value, ")", sep = ""), "No significativo"),
# Median Crossing test
ifelse(medianCrossing.test(data)$p.value < 0.05, paste("Significativo (", medianCrossing.test(data)$p.value, ")", sep = ""), "No significativo"),
# Turning Point test
ifelse(turningPoint.test(data)$p.value < 0.05, paste("Significativo (", turningPoint.test(data)$p.value, ")", sep = ""), "No significativo"),
# Rank Diffrence test
ifelse(rankDifference.test(data)$p.value < 0.05, paste("Significativo (", rankDifference.test(data)$p.value, ")", sep = ""), "No significativo"),
# Auto Correlation test
ifelse(acf(data, plot = FALSE)$acf[2] < 0.05, paste("Significativo (", acf(data, plot = FALSE)$acf[2], ")", sep = ""), "No significativo")
)
)
t.test(data)
# Define la data
years <- c(2000:2014)
print(year)
print(years)
count(years)
length(years)
length(data)
kendall(years, data)
Kendall(years, data)
Kendall(data, years)
Kendall(data, years)
data <- c(1086, 1133, 1144, 1139, 1137, 1223, 1206, 1201, 1209, 1214, 1222, 1210, 1245, 1222, 1258)
Kendall(data, years)
Kendall(data, years)
Kendall(years, data)
MannKendall(data)
MannKendall(years)
x <- years[1:6]
x
x <- years[1:6]
x
y <- data[(length(data)-7):length(data)]
y
x1 <- years[1:6]
x1
x2 <- years[(length(years)-9):length(years)]
x2
x2 <- years[(length(years)-7):length(years)]
x2
y1 <- data[1:6]
y1
y2 <- data[(length(data)-7):length(data)]
y2
MannKendall(x1)
MannKendall(y1)
MannKendall(y2)
MannKendall(x2)
library(ggplot2)
ggplot() +
geom_line(aes(x = years, y = data))
ggplot() +
geom_line(aes(x = years, y = data)) +
theme_bw()
?t.test()
t.test(y1, y2)
t.test(2.4, 2.7)
t.test(y1, y2)
y1
y2
t.test(y1, y2)
t.test(y1, y2, conf.level = 0.95)
t.test(y1, y2, conf.level = 0.95)$p_value
t.test(y1, y2, conf.level = 0.95)$p.value
ifelse(t.test(y1, y2, conf.level = 0.95)$p.value < 0.05, paste("Significativo", sep = ""), "No significativo"),
ifelse(t.test(y1, y2, conf.level = 0.95)$p.value < 0.05, "Significativo", "No significativo"),
ifelse(t.test(y1, y2, conf.level = 0.95)$p.value < 0.05, "Significativo", "No significativo")
MannKendall(y1)
MannKendall(y1,y2)
MannKendall(y1)
MannKendall(y2)
MannKendall(data)
# Define la data
years <- c(2000:2014)
data <- c(1086, 1133, 1144, 1139, 1137, 1223, 1206, 1201, 1209, 1214, 1222, 1210, 1245, 1222, 1258)
years
data
t.test(y1, y2, conf.level = 0.95)$p.value
t.test(y1, y2, conf.level = 0.90)$p.value
t.test(y1, y2, conf.level = 0.90)
t.test(y2, y1, conf.level = 0.90)
t.test(x1, x2, conf.level = 0.90)
t.test(x2, x1, conf.level = 0.90)
t.test(x1, x2, conf.level = 0.90)
t.test(x1, x2, conf.level = 0.95)
t.test(x1, x2, conf.level = 0.90)
data1 <- data[years <= 2006]
data1
y1
data2 <- data[years >= 2007]
data1 <- data[years < 2006]
data1
data2
y1
data1 <- data[years <= 2006]
t.test(data1, data2)
data1 <- data[years <= 2006]
data2 <- data[years >= 2007]
data1 <- data[years <= 2006]
data1
data2 <- data[years >= 2007]
data2
t.test(data1, data2)
data1 <- data[years < 2006]
t.test(data1, data2)
?t.test
t.test(data1, data2, conf.level = 0.1)
data1 <- data[years <= 2006]
data2 <- data[years >= 2007]
t.test(data1, data2, conf.level = 0.1)
t.test(data1, data2, conf.level = 0.05)
t.test(data1, data2, conf.level = 0.01)
data1 <- c(73.1, 91.9, 91, 214, 137.8, 132, 126, 63.9, 75, 74, 219, 178.8, 84.4, 139, 47.5, 186.6, 75)
data2 <- c(325, 234, 21)
t.test(data1, data2, conf.level = 0.01)
t.test(data1, data2, conf.level = 0.95)
mean(data1)
sd(data1)
t.test(data1, data2, conf.level = 0.95).p$value
t.test(data1, data2, conf.level = 0.95)$p.value
ifelse(t.test(data1, data2, conf.level = 0.95)$p.value < 0.05, "SI", "NA")
ifelse(t.test(data1, data2, conf.level = 0.95)$p.value < 0.05, "SI", "NO")
ifelse(var.test(data1, data2)$p.value < 0.05, "SI", "NO")
var.test(data1, data2)$p.value
var.test(data1, data2)
325 * 0.12066
325 * 0.56549
325 * 0.565494905
325 * 0.95
325 * 0.83
325 * 0.63
325 * 0.5
325 * 0.56
325 * 0.56
325 * 0.5
325 * 0.51
325 * 0.501
325 * 0.505
325 * 0.502
325 * 0.5021
325 * 0.50211
325 * 0.50212
325 * 0.5022
325 * 0.5029
325 * 0.503
325 * 0.5039
325 * 0.5049
325 * 0.5041
325 * 0.5042
325 * 0.5043
325 * 0.5045
325 * 0.5044
325 * 0.50441
325 * 0.5043
325 * 0.50438
325 * 0.50434
setwd("~/Documents/Develop/R studio/Visual-precipitation-analysis")
# Importing Data
source('Scripts/Import Data.R')
source("Scripts/Graphics.R")
# Importing Data and Assigning Names
data <- getDataFolder("Data")   # Importing data and storing it in a variable
data_names <- setNames("Data")  # Setting the names of the datasets
View(data)
